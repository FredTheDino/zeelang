program: _global_statement+

_global_statement: function

function: IDENTIFIER "(" func_args ")" TYPE block

func_arg: IDENTIFIER TYPE
func_args: [func_arg ("," func_arg)*]

block: "{" statements "}"
statements: [statement (statement)*]

statement: block
         | return_stmt
         | definition
         | assign
         | if
         | expression ";"

return_stmt: "return" expression ";"

if: "if" expression block ("else" block)?

assign: IDENTIFIER "=" expression ";"

definition: IDENTIFIER TYPE? ":=" expression ";"
          | IDENTIFIER TYPE ";"

expression: add_expr
          | call

ADD_OP: "+" | "-"
add_expr: mul_expr (ADD_OP mul_expr)*
MUL_OP: "*" | "/"
mul_expr: prim_expr (MUL_OP prim_expr)*
prim_expr: "(" expression ")" | IDENTIFIER | constant

call: IDENTIFIER "(" call_args ")"
call_args: [expression ("," expression)*]

constant: signed_number
        | hex_number
        | bin_number

signed_number: /-?\d+(\.\d+)?([eE][+-]?\d+)?/
hex_number: "0x" /[0-9ABCDEFabcdef_]+/
bin_number: "0b" /[01_]+/


BINARY_OPERATOR: "+" | "-" | "*" | "/" | "%"
               | "&" | "|" | "^" | "~"
               | "<" | "<=" | "<<"
               | "==" | "!="
               | ">" | ">=" | ">>"

IDENTIFIER: /[A-z][A-z0-9]*/

TYPE: /[A-z][A-z0-9]*/

COMMENT: "#" /[^\n]/*
%ignore COMMENT

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS
